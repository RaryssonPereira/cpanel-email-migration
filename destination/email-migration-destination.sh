#!/bin/bash

# === SCRIPT: migration-emails.sh ===
# Processo guiado, seguro e documentado, garantindo flexibilidade e controle sobre a migra√ß√£o.

# (Opcional) Ative log se quiser rastrear tudo:
LOGFILE="migration.log"
log() { echo "$(date '+%Y-%m-%d %H:%M:%S') $*" | tee -a "$LOGFILE"; }
# Para desativar o log, basta trocar 'log' por 'echo' nas mensagens abaixo.

# === PARTE 1: Verifica√ß√£o do Byobu ===
# Esta parte garante que o script est√° sendo executado dentro de uma sess√£o Byobu (ou tmux/screen), protegendo a migra√ß√£o
# contra quedas de conex√£o SSH. Tamb√©m orienta e auxilia o usu√°rio na instala√ß√£o e uso do Byobu.

echo -e "\nüîç Verificando se o script est√° sendo executado dentro do Byobu..."

# Checa se a vari√°vel de ambiente do Byobu est√° setada (indica que a sess√£o est√° ativa)
if [ -n "$BYOBU_BACKEND" ]; then
    log "‚úÖ O script est√° sendo executado dentro de uma sess√£o do Byobu. Continuando normalmente..."
else
    # Caso n√£o esteja em uma sess√£o Byobu:
    log "‚ö†Ô∏è  O script **n√£o est√° sendo executado dentro do Byobu**."
    echo -e "‚ÑπÔ∏è  Recomendamos fortemente o uso do Byobu para evitar a perda de conex√£o durante a migra√ß√£o de e-mails."

    # Informa comandos para instala√ß√£o manual caso o usu√°rio prefira
    echo -e "\nVoc√™ tamb√©m pode instalar manualmente:"
    echo "  # Para Ubuntu/Debian: sudo apt install byobu"
    echo "  # Para CentOS/RHEL/AlmaLinux: sudo yum install epel-release byobu"

    # Pergunta ao usu√°rio se deseja iniciar uma sess√£o Byobu antes de continuar
    read -rp $'\n‚ùì Deseja entrar no Byobu antes de continuar? (s/n): ' RESPOSTA

    if [[ "$RESPOSTA" =~ ^[sS]$ ]]; then
        log "üì¶ Verificando se o Byobu est√° instalado..."

        source /etc/os-release # Identifica a distribui√ß√£o Linux em uso

        # Checa se o Byobu est√° instalado
        if ! command -v byobu &>/dev/null; then
            log "üîß Instalando o Byobu..."

            # Instala Byobu conforme o tipo de distribui√ß√£o detectada
            if [[ "$ID" =~ ^(centos|rhel|almalinux)$ ]]; then
                yum install -y epel-release byobu
            elif [[ "$ID" =~ ^(ubuntu|debian)$ ]]; then
                apt update && apt install -y byobu
            else
                # Caso a distribui√ß√£o n√£o seja reconhecida, orienta e pede confirma√ß√£o extra
                log "‚ùå Distribui√ß√£o '$ID' n√£o reconhecida para instala√ß√£o autom√°tica do Byobu."
                read -rp $'\n‚ùì Deseja continuar mesmo assim, assumindo o risco? (s/n): ' CONTINUA
                if [[ ! "$CONTINUA" =~ ^[sS]$ ]]; then
                    log "Encerrando script conforme escolha do usu√°rio."
                    sleep 1
                    exit 1
                fi
            fi

            log "‚úÖ Byobu instalado com sucesso."
        else
            log "‚úÖ Byobu j√° est√° instalado."
        fi

        # Orienta o usu√°rio a iniciar uma sess√£o Byobu e rodar o script novamente
        SCRIPT_NAME=$(basename "$0")

        echo -e "\nüö™ Agora voc√™ pode entrar no Byobu com o comando:\n"
        echo -e "   üëâ  byobu\n"
        echo -e "üîÅ Depois disso, execute novamente este script com:\n"
        echo -e "   üëâ  ./$SCRIPT_NAME   ou   bash $SCRIPT_NAME\n"
        echo -e "üí° Isso garante que, mesmo em caso de desconex√£o, a migra√ß√£o continue normalmente."

        sleep 1
        exit 0 # Sai para que o usu√°rio entre no Byobu e execute novamente
    else
        # Caso o usu√°rio opte por n√£o usar Byobu, segue, mas alerta sobre o risco
        log "‚ö†Ô∏è  Continuando a execu√ß√£o fora do Byobu conforme sua escolha."
        echo -e "\n‚ö†Ô∏è  ATEN√á√ÉO: Se a conex√£o SSH for perdida, a migra√ß√£o pode ser interrompida e gerar inconsist√™ncias.\n"
        sleep 1
    fi
fi

# === PARTE 2: Verifica√ß√£o e decis√£o sobre uso do sshpass ===
# Nesta etapa, o script pergunta se o usu√°rio quer usar o sshpass para automatizar a digita√ß√£o da senha SSH.
# O sshpass permite executar comandos como rsync e scp sem precisar digitar a senha manualmente a cada opera√ß√£o.

echo -e "\nüîê O utilit√°rio sshpass pode ser usado para automatizar o envio da senha no rsync/scp."
echo "Isso evita que voc√™ precise digitar a senha manualmente toda vez que uma conta for migrada."

# Pergunta ao usu√°rio se deseja usar o sshpass (responde 's' para sim)
read -rp $'\n‚ùì Deseja usar sshpass para automatizar a digita√ß√£o da senha SSH? (s/n): ' USAR_SSHPASS

if [[ "$USAR_SSHPASS" =~ ^[sS]$ ]]; then
    log "üîç Verificando se sshpass est√° instalado..."

    # Verifica se o sshpass j√° est√° instalado
    if command -v sshpass &>/dev/null; then
        log "‚úÖ sshpass est√° instalado. Continuando com suporte a senha autom√°tica via rsync/scp..."
        USAR_SSHPASS=true
    else
        log "‚ö†Ô∏è  sshpass n√£o est√° instalado. Tentando instalar automaticamente..."

        source /etc/os-release # Carrega informa√ß√µes da distribui√ß√£o Linux

        # Instala sshpass conforme a distribui√ß√£o detectada
        if [[ "$ID" =~ ^(centos|rhel|almalinux)$ ]]; then
            yum install -y epel-release sshpass
        elif [[ "$ID" =~ ^(ubuntu|debian)$ ]]; then
            apt update && apt install -y sshpass
        else
            log "‚ùå Distribui√ß√£o '$ID' n√£o reconhecida. Instale sshpass manualmente e reexecute o script."
            exit 1
        fi

        # Confirma se a instala√ß√£o foi bem-sucedida
        if command -v sshpass &>/dev/null; then
            log "‚úÖ sshpass instalado com sucesso. Continuando com suporte a senha autom√°tica via rsync/scp..."
            log "‚ÑπÔ∏è Caso encontre qualquer erro mais adiante, recomendamos relan√ßar o script manualmente."
            USAR_SSHPASS=true
        else
            log "‚ùå A instala√ß√£o do sshpass falhou. Por favor, instale manualmente e reexecute o script."
            exit 1
        fi
    fi
else
    # Se o usu√°rio optar por n√£o usar sshpass, segue em modo manual (senha digitada a cada conex√£o)
    log "‚ö†Ô∏è  O script continuar√° **sem** usar sshpass."
    echo "üìå Voc√™ precisar√° digitar a senha toda vez que o rsync ou scp solicitar conex√£o com o servidor remoto."
    USAR_SSHPASS=false
fi

# === PARTE 3: Coleta dos dados de acesso ao servidor antigo ===
# Esta parte coleta as informa√ß√µes necess√°rias para conectar ao servidor antigo via SSH
# (host, usu√°rio, porta e senha), e testa a conectividade para garantir que o rsync funcionar√°.

echo -e "\nüöÄ Vamos configurar a conex√£o com o servidor ANTIGO (onde est√£o os e-mails) para iniciar a coleta."

# Solicita o hostname ou IP do servidor antigo
read -rp $'\nüåê Host ou IP do servidor antigo (ex: srv123.host.com): ' ORIGEM_HOST

# Solicita o usu√°rio SSH do servidor antigo (ex: root)
read -rp $'\nüîê Usu√°rio SSH do servidor antigo (ex: root): ' ORIGEM_USER

# Solicita a porta SSH
read -rp $'\nüì° Porta SSH (ex: 22 ou 51439): ' ORIGEM_PORT

# Solicita a senha do usu√°rio SSH, entrada oculta
read -rsp $'\nüîë Senha do usu√°rio SSH: ' ORIGEM_SENHA
echo "" # Quebra de linha ap√≥s a senha

# Testa a conectividade SSH com os dados fornecidos
echo -e "\nüîé Testando conectividade SSH com o servidor antigo..."

if [ "$USAR_SSHPASS" = true ]; then
    ERRO_SSH=$(sshpass -p "$ORIGEM_SENHA" ssh -p "$ORIGEM_PORT" \
        -o StrictHostKeyChecking=no \
        -o ConnectTimeout=10 \
        "$ORIGEM_USER@$ORIGEM_HOST" \
        "echo '‚úÖ Conex√£o estabelecida com sucesso.'" 2>&1)
else
    ssh -p "$ORIGEM_PORT" "$ORIGEM_USER@$ORIGEM_HOST" "echo '‚úÖ Conex√£o estabelecida com sucesso.'"
    ERRO_SSH=$?
fi

# Verifica se a conex√£o foi bem-sucedida
if [ $? -ne 0 ]; then
    echo -e "‚ùå N√£o foi poss√≠vel conectar-se ao servidor remoto com os dados fornecidos."
    echo -e "üìÑ Detalhes do erro SSH:\n"
    echo "$ERRO_SSH"
    echo -e "\nüîÅ Verifique se o host, porta, usu√°rio e senha est√£o corretos."
    exit 1
else
    echo -e "\n‚úÖ Conex√£o SSH testada com sucesso. Pronto para identificar as caixas de e-mail."
fi

# === PARTE 4: Verifica√ß√£o do caminho ===
# Esta parte pede o usu√°rio do cPanel e o dom√≠nio e monta o caminho necess√°rio para localizar as caixas de e-mail que ser√£o migradas.
# Apenas define o caminho e valida sua exist√™ncia no servidor remoto.

echo -e "\nInforme o usu√°rio do cPanel (por exemplo: cliente123):"
read -rp "Usu√°rio: " USUARIO_EMAIL

echo -e "\nInforme o dom√≠nio do e-mail (por exemplo: dominio.com.br):"
read -rp "Dom√≠nio: " DOMINIO_EMAIL

# Monta o caminho que ser√° usado em AMBOS os servidores
CAMINHO_FINAL="/home/$USUARIO_EMAIL/mail/$DOMINIO_EMAIL"

log "üîç Verificando se o caminho $CAMINHO_FINAL existe no servidor antigo ($ORIGEM_HOST)..."

if [ "$USAR_SSHPASS" = true ]; then
    sshpass -p "$ORIGEM_SENHA" ssh -p "$ORIGEM_PORT" -o StrictHostKeyChecking=no "$ORIGEM_USER@$ORIGEM_HOST" \
        "[ -d '$CAMINHO_FINAL' ]" || {
        echo "‚ùå Diret√≥rio '$CAMINHO_FINAL' n√£o encontrado no servidor remoto. Verifique o usu√°rio e o dom√≠nio."
        exit 1
    }
else
    ssh -p "$ORIGEM_PORT" "$ORIGEM_USER@$ORIGEM_HOST" "[ -d '$CAMINHO_FINAL' ]" || {
        echo "‚ùå Diret√≥rio '$CAMINHO_FINAL' n√£o encontrado no servidor remoto. Verifique o usu√°rio e o dom√≠nio."
        exit 1
    }
fi

log "‚úÖ Caminho de e-mails validado com sucesso."

# Armazena o caminho global para uso nas pr√≥ximas etapas
CAMINHO_ORIGEM="$CAMINHO_FINAL"
CAMINHO_DESTINO="$CAMINHO_FINAL"

# === PARTE 5: Sele√ß√£o de contas de e-mail a migrar ===
# Esta parte permite escolher quais contas de e-mail do dom√≠nio informado ser√£o migradas.
# O script lista todas as contas encontradas remotamente e permite ignorar as indesejadas.

echo -e "\nüì• Listando todas as contas de e-mail encontradas no dom√≠nio '$DOMINIO_EMAIL'..."

if [ "$USAR_SSHPASS" = true ]; then
    CONTAS_TODAS=($(sshpass -p "$ORIGEM_SENHA" ssh -p "$ORIGEM_PORT" -o StrictHostKeyChecking=no \
        "$ORIGEM_USER@$ORIGEM_HOST" "ls -1 '$CAMINHO_ORIGEM'")) || {
        echo "‚ùå Erro ao listar contas dentro de '$CAMINHO_ORIGEM'. Verifique permiss√µes ou exist√™ncia do diret√≥rio."
        exit 1
    }
else
    CONTAS_TODAS=($(ssh -p "$ORIGEM_PORT" "$ORIGEM_USER@$ORIGEM_HOST" "ls -1 '$CAMINHO_ORIGEM'")) || {
        echo "‚ùå Erro ao listar contas dentro de '$CAMINHO_ORIGEM'. Verifique permiss√µes ou exist√™ncia do diret√≥rio."
        exit 1
    }
fi

# Exibe as contas de e-mail dispon√≠veis
echo -e "\nüìß Contas encontradas:"
for conta in "${CONTAS_TODAS[@]}"; do
    echo "   - $conta"
done

# Pergunta ao operador se deseja ignorar alguma conta da migra√ß√£o
read -rp $'\nüö´ Deseja ignorar alguma conta da migra√ß√£o? Digite os nomes separados por espa√ßo (ou pressione Enter para migrar todas): ' IGNORADAS_INPUT

# Converte a lista digitada em array (se houver contas para ignorar)
IFS=' ' read -r -a CONTAS_IGNORADAS <<<"$IGNORADAS_INPUT"

# Filtra as contas para migrar (remove as que est√£o na lista de ignoradas)
CONTAS_MIGRAR=()
for conta in "${CONTAS_TODAS[@]}"; do
    IGNORAR=false
    for ignorada in "${CONTAS_IGNORADAS[@]}"; do
        if [[ "$conta" == "$ignorada" ]]; then
            IGNORAR=true
            break
        fi
    done
    if [ "$IGNORAR" = false ]; then
        CONTAS_MIGRAR+=("$conta")
    fi
done

# Exibe as contas finais que ser√£o migradas
echo -e "\n‚úÖ Contas que ser√£o migradas:"
for conta in "${CONTAS_MIGRAR[@]}"; do
    echo "   üì§ $conta"
done

# === PARTE 6: Execu√ß√£o da migra√ß√£o via rsync ===
# Esta etapa percorre as contas selecionadas e transfere toda a estrutura de pastas/arquivos de cada conta de e-mail
# do servidor antigo para o servidor onde o script est√° sendo executado, utilizando rsync via SSH.

echo -e "\nüöö Iniciando migra√ß√£o via rsync para cada conta selecionada..."

for conta in "${CONTAS_MIGRAR[@]}"; do
    echo -e "\nüì§ Migrando conta: $conta@$DOMINIO_EMAIL"

    # Define os caminhos de origem e destino
    REMOTE_PATH="$CAMINHO_ORIGEM/$conta/"
    LOCAL_PATH="$CAMINHO_DESTINO/$conta/"

    # Cria o diret√≥rio de destino local se n√£o existir
    mkdir -p "$LOCAL_PATH"

    # Executa o rsync puxando os dados do servidor remoto para o local
    if [ "$USAR_SSHPASS" = true ]; then
        sshpass -p "$ORIGEM_SENHA" rsync -az --delete \
            -e "ssh -p $ORIGEM_PORT -o StrictHostKeyChecking=no" \
            "$ORIGEM_USER@$ORIGEM_HOST:$REMOTE_PATH" "$LOCAL_PATH"
    else
        rsync -az --delete \
            -e "ssh -p $ORIGEM_PORT -o StrictHostKeyChecking=no" \
            "$ORIGEM_USER@$ORIGEM_HOST:$REMOTE_PATH" "$LOCAL_PATH"
    fi

    if [ $? -eq 0 ]; then
        echo "‚úÖ Conta $conta migrada com sucesso."
    else
        echo "‚ùå Falha ao migrar a conta $conta. Verifique a conex√£o e permiss√µes."
    fi

done

echo -e "\nüèä Migra√ß√£o conclu√≠da para todas as contas selecionadas."
