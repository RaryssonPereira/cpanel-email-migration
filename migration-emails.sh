#!/bin/bash

# === SCRIPT: migration-emails.sh ===
# O processo √© guiado, seguro e documentado, garantindo flexibilidade e controle sobre a migra√ß√£o.

# === PARTE 1: Verifica√ß√£o do Byobu ===
# Esta parte do script verifica se ele est√° sendo executado dentro de uma sess√£o Byobu.
# O Byobu √© uma camada visual para ferramentas como tmux/screen que mant√©m sess√µes persistentes no terminal.
# Ele √© muito √∫til para tarefas longas ou sens√≠veis √† desconex√£o, como migra√ß√£o de e-mails.

echo -e "\nüîç Verificando se o script est√° sendo executado dentro do Byobu..."
# Mostra uma mensagem informando que ser√° feita a verifica√ß√£o da presen√ßa do Byobu.

# Verifica se a vari√°vel de ambiente $BYOBU_BACKEND est√° definida (n√£o vazia)
# Essa vari√°vel √© automaticamente setada pelo pr√≥prio Byobu quando uma sess√£o est√° ativa.
# A op√ß√£o `-n` do `test` (ou `[...]`) verifica se a vari√°vel tem conte√∫do (n√£o est√° vazia).
if [ -n "$BYOBU_BACKEND" ]; then
    echo "‚úÖ O script est√° sendo executado dentro de uma sess√£o do Byobu. Continuando normalmente..."
    # Se a vari√°vel $BYOBU_BACKEND estiver definida, informa que o Byobu est√° ativo e segue com o script.
else
    # Caso contr√°rio (Byobu n√£o est√° ativo)...

    echo -e "‚ö†Ô∏è  O script **n√£o est√° sendo executado dentro do Byobu**."
    # Alerta visual sobre a aus√™ncia do Byobu.

    echo -e "‚ÑπÔ∏è  Recomendamos fortemente o uso do Byobu para evitar a perda de conex√£o durante a migra√ß√£o de e-mails."
    # Explica o motivo da recomenda√ß√£o: evitar que a migra√ß√£o seja interrompida caso a conex√£o com o terminal caia.

    # Pergunta ao usu√°rio se ele quer entrar no Byobu antes de continuar.
    read -rp $'\n‚ùì Deseja entrar no Byobu antes de continuar? (s/n): ' RESPOSTA
    # `-r` impede que o bash interprete caracteres especiais.
    # `-p` define o prompt da pergunta.
    # O resultado (s/n) ser√° armazenado na vari√°vel RESPOSTA.

    # Se a resposta for "s" ou "S" (aceitando iniciar o Byobu)...
    if [[ "$RESPOSTA" =~ ^[sS]$ ]]; then
        echo -e "\nüì¶ Verificando se o Byobu est√° instalado..."
        # Informa que o script ir√° verificar (e instalar, se necess√°rio) o Byobu.

        source /etc/os-release
        # L√™ e carrega as vari√°veis do arquivo `/etc/os-release`, que identifica a distribui√ß√£o Linux atual.
        # Isso permite saber se est√° rodando em Ubuntu, Debian, CentOS, AlmaLinux, etc.

        if ! command -v byobu &>/dev/null; then
            # Usa `command -v` para checar se o comando `byobu` existe (est√° dispon√≠vel no sistema).
            # Redireciona a sa√≠da padr√£o e de erro para /dev/null para n√£o mostrar nada se n√£o encontrar.

            echo -e "üîß Instalando o Byobu..."
            # Se n√£o estiver instalado, informa que far√° a instala√ß√£o.

            if [[ "$ID" =~ ^(centos|rhel|almalinux)$ ]]; then
                # Se o ID do sistema for um dos relacionados ao ecossistema Red Hat (CentOS, RHEL, AlmaLinux)...

                yum install -y epel-release byobu
                # Usa o gerenciador `yum` para instalar o reposit√≥rio EPEL (se necess√°rio) e o pacote `byobu`.

            elif [[ "$ID" =~ ^(ubuntu|debian)$ ]]; then
                # Se for baseado em Debian, como Ubuntu ou Debian puro...

                apt update && apt install -y byobu
                # Atualiza a lista de pacotes e instala o Byobu usando o `apt`.

            else
                # Se o ID da distro n√£o for reconhecido...

                echo "‚ùå Distribui√ß√£o '$ID' n√£o reconhecida para instala√ß√£o autom√°tica do Byobu."
                # Informa erro ao usu√°rio e diz que n√£o poder√° instalar o Byobu.

                exit 1
                # Encerra o script com erro, pois n√£o √© seguro continuar sem a prote√ß√£o do Byobu em sistemas desconhecidos.
            fi

            echo "‚úÖ Byobu instalado com sucesso."
            # Confirma que a instala√ß√£o ocorreu sem erros.
        else
            echo "‚úÖ Byobu j√° est√° instalado."
            # Caso o Byobu j√° esteja presente, informa que n√£o ser√° necess√°rio instalar.
        fi

        # Pega o nome do script atual (sem caminho) usando `basename "$0"` e guarda na vari√°vel SCRIPT_NAME.
        SCRIPT_NAME=$(basename "$0")
        # Isso serve para sugerir ao usu√°rio como executar novamente o script ap√≥s entrar no Byobu.

        echo -e "\nüö™ Agora voc√™ pode entrar no Byobu com o comando:\n"
        echo -e "   üëâ  byobu\n"
        # Instrui o usu√°rio a iniciar uma nova sess√£o do Byobu no terminal.

        echo -e "üîÅ Depois disso, execute novamente este script com:\n"
        echo -e "   üëâ  ./$SCRIPT_NAME\n"
        # Mostra o comando exato para reexecutar o script de dentro da sess√£o Byobu.

        echo -e "üí° Isso garante que, mesmo em caso de desconex√£o, a migra√ß√£o continue normalmente."
        # Refor√ßa a principal vantagem de usar o Byobu: resili√™ncia contra perda de conex√£o SSH.

        exit 0
        # Sai do script para que o usu√°rio possa iniciar o Byobu e voltar.
    else
        echo -e "\n‚ö†Ô∏è  Continuando a execu√ß√£o fora do Byobu conforme sua escolha."
        # Caso o usu√°rio tenha optado por n√£o usar o Byobu, o script continua normalmente.
        # Ainda assim, exibe um alerta leve, sugerindo que o uso do Byobu √© mais seguro.
    fi
fi

# === PARTE 2: Verifica√ß√£o e decis√£o sobre uso do sshpass ===
# Esta se√ß√£o trata da escolha de utilizar ou n√£o o sshpass, uma ferramenta que permite automatizar o envio de senha via SSH,
# o que facilita bastante scripts como este que usam rsync entre servidores que exigem senha.

echo -e "\nüîê O utilit√°rio sshpass pode ser usado para automatizar o envio da senha no rsync."
# Mostra uma mensagem informativa para o usu√°rio explicando o que √© o sshpass e por que ele pode ser √∫til.

echo "Isso evita que voc√™ precise digitar a senha manualmente toda vez que uma conta for migrada."
# Complementa a explica√ß√£o anterior, destacando o benef√≠cio pr√°tico do sshpass na automa√ß√£o do processo.

# Pergunta se o usu√°rio deseja usar o sshpass
read -rp $'\n‚ùì Deseja usar sshpass para automatizar a digita√ß√£o da senha SSH? (s/n): ' USAR_SSHPASS
# Usa o comando `read` com `-r` (n√£o interpretar backslashes) e `-p` (prompt na mesma linha) para solicitar ao usu√°rio
# uma resposta se deseja usar o sshpass. A resposta √© armazenada na vari√°vel USAR_SSHPASS.

if [[ "$USAR_SSHPASS" =~ ^[sS]$ ]]; then
    # Verifica se a resposta do usu√°rio foi "s" ou "S" (sim). O uso da express√£o regular `^[sS]$` garante que s√≥ seja aceito exatamente "s" ou "S".

    echo -e "\nüîç Verificando se sshpass est√° instalado..."
    # Informa que ser√° feita a checagem de presen√ßa do sshpass na m√°quina.

    if command -v sshpass &>/dev/null; then
        # Usa `command -v` para verificar se o sshpass est√° dispon√≠vel no PATH do sistema.
        # Redireciona qualquer sa√≠da padr√£o e de erro para /dev/null para suprimir mensagens.

        echo "‚úÖ sshpass est√° instalado. Continuando com suporte a senha autom√°tica via rsync..."
        # Confirma para o usu√°rio que o sshpass est√° instalado.

        USAR_SSHPASS=true
        # Altera o valor da vari√°vel USAR_SSHPASS para `true`, indicando que o script pode utilizar sshpass mais adiante.
    else
        echo -e "‚ö†Ô∏è  sshpass n√£o est√° instalado. Tentando instalar automaticamente..."
        # Informa ao usu√°rio que o sshpass n√£o est√° presente e tentar√° instalar automaticamente.

        source /etc/os-release
        # Carrega as vari√°veis de identifica√ß√£o da distribui√ß√£o Linux (`ID`, `VERSION_ID`, etc.) que est√£o no arquivo /etc/os-release.
        # Isso √© usado para determinar o gerenciador de pacotes correto.

        if [[ "$ID" =~ ^(centos|rhel|almalinux)$ ]]; then
            # Se a distribui√ß√£o for baseada em Red Hat, como CentOS, RHEL ou AlmaLinux...

            yum install -y epel-release sshpass
            # Usa o gerenciador de pacotes `yum` para instalar o `epel-release` (reposit√≥rio adicional) e o `sshpass`.

        elif [[ "$ID" =~ ^(ubuntu|debian)$ ]]; then
            # Se a distribui√ß√£o for baseada em Debian, como Ubuntu ou Debian puro...

            apt update && apt install -y sshpass
            # Atualiza a lista de pacotes com `apt update` e instala o `sshpass` automaticamente com `apt install`.

        else
            echo "‚ùå Distribui√ß√£o '$ID' n√£o reconhecida. Instale sshpass manualmente e reexecute o script."
            # Caso o ID da distribui√ß√£o n√£o seja reconhecido, o script informa isso ao usu√°rio e orienta a instala√ß√£o manual.

            exit 1
            # Sai do script com erro, pois n√£o pode continuar sem sshpass se o usu√°rio quis us√°-lo.
        fi

        # Ap√≥s a tentativa de instala√ß√£o, verifica novamente se o sshpass foi instalado com sucesso:
        if command -v sshpass &>/dev/null; then
            echo "‚úÖ sshpass instalado com sucesso. Continuando com suporte a senha autom√°tica via rsync..."
            # Confirma que a instala√ß√£o foi bem-sucedida.

            echo "‚ÑπÔ∏è Caso encontre qualquer erro mais adiante, recomendamos relan√ßar o script manualmente."
            # D√° uma dica extra ao usu√°rio sobre poss√≠veis falhas futuras e como proceder.

            USAR_SSHPASS=true
            # Define a vari√°vel como `true` novamente para uso no restante do script.
        else
            echo "‚ùå A instala√ß√£o do sshpass falhou. Por favor, instale manualmente e reexecute o script."
            # Informa que mesmo ap√≥s tentativa autom√°tica, n√£o foi poss√≠vel instalar o sshpass.

            exit 1
            # Encerra o script com c√≥digo de erro.
        fi
    fi
else
    # Se o usu√°rio n√£o respondeu "s" ou "S" (ou seja, optou por n√£o usar sshpass)...

    echo -e "\n‚ö†Ô∏è  O script continuar√° **sem** usar sshpass."
    # Informa ao usu√°rio que a execu√ß√£o seguir√° sem o uso de sshpass.

    echo "üìå Voc√™ precisar√° digitar a senha toda vez que o rsync solicitar conex√£o com o servidor remoto."
    # Alerta que, sem o sshpass, a senha SSH ser√° solicitada manualmente em cada etapa da migra√ß√£o.

    USAR_SSHPASS=false
    # Define a vari√°vel como `false`, para que o restante do script saiba que o sshpass n√£o est√° habilitado.
fi

# === PARTE 3: Coleta de informa√ß√µes dos diret√≥rios ===
# Esta se√ß√£o coleta os dados necess√°rios para saber de qual conta e dom√≠nio os e-mails ser√£o migrados,
# verificando a estrutura de diret√≥rios e validando entradas.

echo -e "\nüßæ Vamos coletar as informa√ß√µes da conta de e-mail que ser√° migrada."
# Exibe uma mensagem inicial indicando que come√ßa a etapa de coleta de dados.

# Lista os diret√≥rios em /home para sugerir usu√°rios dispon√≠veis.
echo -e "\nüìÅ Usu√°rios dispon√≠veis no diret√≥rio /home:"
# Informa ao operador que vai listar os usu√°rios dispon√≠veis para facilitar a escolha do usu√°rio cPanel.

if ls /home &>/dev/null; then
    ls /home
    # Se o comando `ls /home` n√£o gerar erro, lista os diret√≥rios (usu√°rios) dentro de /home.
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel listar os diret√≥rios em /home (permiss√£o negada ou diret√≥rio ausente)."
    # Se o `ls /home` gerar erro (ex: permiss√£o negada), exibe uma mensagem de alerta.
fi

# Solicita ao operador o nome do usu√°rio do cPanel.
read -rp $'\nüë§ Qual o USU√ÅRIO do cPanel (ex: batata)? ' USUARIO_EMAIL
# Usa `read` com prompt customizado para capturar o nome de usu√°rio cPanel.
# A entrada ser√° salva na vari√°vel `USUARIO_EMAIL`.

# Verifica se o diret√≥rio do usu√°rio existe, caso contr√°rio interrompe.
if [ ! -d "/home/$USUARIO_EMAIL" ]; then
    echo -e "‚ùå O diret√≥rio /home/$USUARIO_EMAIL n√£o existe. Verifique o nome e tente novamente."
    # Caso o diret√≥rio n√£o exista (ou seja, o usu√°rio informado √© inv√°lido), exibe erro...

    exit 1
    # ... e encerra o script imediatamente para evitar falhas futuras.
fi

# Lista os dom√≠nios existentes no diret√≥rio de e-mail desse usu√°rio.
echo -e "\nüì¨ Dom√≠nios encontrados em /home/$USUARIO_EMAIL/mail:"
# Exibe uma mensagem explicando que os dom√≠nios ser√£o listados.

if ls "/home/$USUARIO_EMAIL/mail" &>/dev/null; then
    ls "/home/$USUARIO_EMAIL/mail"
    # Lista os subdiret√≥rios (normalmente dom√≠nios) dentro de /home/usuario/mail/
else
    echo "‚ö†Ô∏è  N√£o foi poss√≠vel listar os dom√≠nios (talvez o diret√≥rio n√£o exista ou esteja vazio)."
    # Se n√£o conseguir listar (ex: diret√≥rio vazio ou com permiss√£o negada), mostra um alerta.
fi

# Solicita ao operador o nome do dom√≠nio cujas contas ser√£o migradas.
read -rp $'\nüåê Qual o dom√≠nio que deseja migrar (ex: aguardidanoticia.com.br)? ' DOMINIO_EMAIL
# Pede ao operador que informe o dom√≠nio, salvando a resposta em `DOMINIO_EMAIL`.

# Define os caminhos poss√≠veis para os arquivos de e-mail:
# - Se o script for rodado como root (em WHM), o caminho absoluto √© necess√°rio.
# - Se for rodado dentro do terminal de um usu√°rio cPanel, o caminho √© relativo ao diret√≥rio pessoal.
CAMINHO_WHM="/home/$USUARIO_EMAIL/mail/$DOMINIO_EMAIL"
CAMINHO_CPANEL="mail/$DOMINIO_EMAIL"
# Define as duas possibilidades de caminho com base no contexto de execu√ß√£o.

# Verifica se o script est√° sendo executado por root (UID 0).
if [ "$EUID" -eq 0 ]; then
    CAMINHO_FINAL="$CAMINHO_WHM"
    # Se o script estiver sendo executado como root, define o caminho completo.
else
    CAMINHO_FINAL="$CAMINHO_CPANEL"
    # Se n√£o for root (usu√°rio comum do cPanel), define o caminho relativo.
fi

# Verifica se o diret√≥rio final com as contas de e-mail existe.
if [ ! -d "$CAMINHO_FINAL" ]; then
    echo -e "\n‚ùå O diret√≥rio de e-mails '$CAMINHO_FINAL' n√£o foi encontrado."
    echo "üîé Verifique se o usu√°rio e o dom√≠nio est√£o corretos, ou se voc√™ est√° no ambiente certo (root ou cPanel)."
    # Se o diret√≥rio de e-mails n√£o existir no caminho final (calculado acima), alerta o operador
    # e sugere revisar os dados ou o contexto de execu√ß√£o (root ou n√£o).

    exit 1
    # Encerra o script para evitar seguir com caminho inv√°lido.
fi

# Mostra um resumo dos dados coletados antes de seguir.
echo -e "\nüìÇ Diret√≥rio de origem identificado:"
echo "   ‚úÖ Usu√°rio  : $USUARIO_EMAIL"
echo "   ‚úÖ Dom√≠nio  : $DOMINIO_EMAIL"
echo "   üìå Caminho  : $CAMINHO_FINAL"
# Resume para o operador as informa√ß√µes chave: nome do usu√°rio, dom√≠nio e caminho completo de onde os e-mails ser√£o migrados.
# Isso permite revisar visualmente antes de prosseguir.

# Aguarda confirma√ß√£o do operador antes de prosseguir com a migra√ß√£o.
read -rp $'\nüîÅ Pressione [Enter] para continuar com a migra√ß√£o ou CTRL+C para cancelar...'
# Aguarda o usu√°rio pressionar ENTER para confirmar que est√° tudo certo.
# Ou, se quiser abortar, pode usar CTRL+C antes de seguir.

# === PARTE 4: Sele√ß√£o de contas de e-mail a migrar ===
# Esta parte permite ao operador escolher quais contas de e-mail do dom√≠nio informado devem ser migradas.
# O script lista todas as contas existentes e oferece a op√ß√£o de ignorar algumas antes de prosseguir.

echo -e "\nüì• Listando todas as contas de e-mail encontradas no dom√≠nio '$DOMINIO_EMAIL'..."
# Exibe uma mensagem indicando que o script vai buscar as contas de e-mail existentes para esse dom√≠nio.

# Lista todos os diret√≥rios dentro do dom√≠nio (essas s√£o as contas de e-mail).
# Cada diret√≥rio representa uma conta de e-mail (ex: contato@dominio.com ‚Üí /mail/dominio.com/contato).
if ! CONTAS_TODAS=($(ls -1 "$CAMINHO_FINAL")); then
    # Tenta executar `ls -1` (um item por linha) no diret√≥rio do dom√≠nio de e-mail.
    # Os nomes dos diret√≥rios (contas) s√£o armazenados como array na vari√°vel CONTAS_TODAS.
    # O `!` antes significa que, se o comando falhar, o bloco ser√° executado.

    echo "‚ùå Erro ao listar contas dentro de '$CAMINHO_FINAL'. Verifique permiss√µes ou exist√™ncia do diret√≥rio."
    # Se a listagem falhar, exibe uma mensagem de erro personalizada.

    exit 1
    # Encerra a execu√ß√£o do script imediatamente, pois n√£o h√° como continuar sem as contas.
fi

# Mostra as contas dispon√≠veis.
echo -e "\nüìß Contas encontradas:"
for conta in "${CONTAS_TODAS[@]}"; do
    echo "   - $conta"
done
# Faz um loop em todas as contas armazenadas em CONTAS_TODAS (ou seja, diret√≥rios encontrados).
# Exibe cada uma com um marcador visual.

# Pergunta quais contas devem ser ignoradas, se houver.
read -rp $'\nüõë Deseja ignorar alguma conta da migra√ß√£o? Digite os nomes separados por espa√ßo (ou pressione Enter para migrar todas): ' IGNORADAS_INPUT
# Solicita ao operador que informe, opcionalmente, uma lista de contas a serem **ignoradas**.
# Exemplo: "contato financeiro teste" ‚Üí ser√£o ignoradas contato@, financeiro@ e teste@.

# Converte a entrada do usu√°rio em array, separando por espa√ßos.
IFS=' ' read -r -a CONTAS_IGNORADAS <<<"$IGNORADAS_INPUT"
# Usa o separador de campos `IFS=' '` para dividir a entrada em palavras.
# Isso gera um array chamado `CONTAS_IGNORADAS` com cada conta a ser ignorada.

# Compara todas as contas dispon√≠veis com as ignoradas para filtrar apenas as que ser√£o migradas.
CONTAS_MIGRAR=()
# Inicializa o array que ir√° conter apenas as contas que **devem ser migradas**.

for conta in "${CONTAS_TODAS[@]}"; do
    # Percorre cada conta dispon√≠vel.

    IGNORAR=false
    # Inicializa uma flag para dizer se a conta deve ser ignorada ou n√£o.

    for ignorada in "${CONTAS_IGNORADAS[@]}"; do
        # Para cada conta da lista de ignoradas...

        if [[ "$conta" == "$ignorada" ]]; then
            # Verifica se a conta atual est√° na lista de ignoradas.

            IGNORAR=true
            break
            # Se encontrar correspond√™ncia, define a flag como `true` e quebra o loop interno.
        fi
    done

    # Adiciona √† lista de migra√ß√£o apenas se n√£o estiver na lista de ignoradas.
    if [ "$IGNORAR" = false ]; then
        CONTAS_MIGRAR+=("$conta")
        # Se a conta **n√£o** estiver na lista de ignoradas, adiciona ao array `CONTAS_MIGRAR`.
    fi
done

# Exibe as contas finais que ser√£o migradas.
echo -e "\n‚úÖ Contas que ser√£o migradas:"
for conta in "${CONTAS_MIGRAR[@]}"; do
    echo "   üì§ $conta"
done
# Lista final das contas que ser√£o migradas, formatadas com √≠cone de envio.

# Confirma com o operador antes de seguir para a pr√≥xima parte.
read -rp $'\nüîÅ Pressione [Enter] para iniciar a migra√ß√£o das contas acima ou CTRL+C para cancelar...'
# D√° uma pausa final, aguardando o operador validar visualmente se as contas est√£o corretas.
# ENTER ‚Üí continua | CTRL+C ‚Üí cancela

# === PARTE 5: Quais caixas ser√£o migradas ===
# Esta se√ß√£o permite ao operador definir quais pastas internas (caixas) de cada conta de e-mail devem ser inclu√≠das na migra√ß√£o.
# Por padr√£o, uma conta de e-mail no cPanel usa "cur" e "new" para a Caixa de Entrada, e tem outras pastas como .Sent, .Trash, etc.

echo -e "\nüìÇ Agora vamos definir quais caixas (pastas internas) ser√£o migradas em cada conta."
# Informa ao operador que o pr√≥ximo passo ser√° escolher as pastas internas (caixas) da conta que ser√£o migradas.

# Explica√ß√£o did√°tica para o usu√°rio
echo -e "\nüîé Cada conta de e-mail possui v√°rias pastas. Por padr√£o, as principais s√£o:"
echo "   - Caixa de Entrada  ‚Üí cur e new"
echo "   - Enviados          ‚Üí .Sent"
echo "   - Rascunhos         ‚Üí .Drafts"
echo "   - Lixeira           ‚Üí .Trash"
echo "   - Spam / Lixo       ‚Üí .Junk ou .spam"
# Mostra ao operador uma explica√ß√£o amig√°vel das principais pastas que comp√µem a estrutura de uma conta de e-mail no cPanel.

echo -e "\nüìå O script sempre ir√° copiar os diret√≥rios 'cur' e 'new' de cada pasta escolhida."
# Esclarece que, independentemente da pasta (ex: .Sent), o conte√∫do que ser√° migrado vem de `cur` e `new` dentro de cada uma.

# Pergunta ao usu√°rio quais caixas devem ser migradas (entrada livre, separada por espa√ßo)
read -rp $'\n‚úèÔ∏è  Quais caixas voc√™ deseja migrar? (ex: .Sent .Trash .Drafts) \nPara migrar apenas a Caixa de Entrada, deixe em branco e pressione Enter: ' CAIXAS_PERSONALIZADAS
# Aqui o script pede ao operador para digitar as pastas que quer migrar al√©m da Caixa de Entrada.
# Exemplo de entrada: `.Sent .Trash .Drafts`
# O valor ser√° salvo como string na vari√°vel `CAIXAS_PERSONALIZADAS`.

# Se o usu√°rio n√£o preencher nada, migramos apenas a caixa de entrada padr√£o
if [ -z "$CAIXAS_PERSONALIZADAS" ]; then
    # A op√ß√£o `-z` testa se a vari√°vel est√° vazia.
    # Se estiver vazia (ENTER foi pressionado sem nada), considera que o operador quer migrar apenas a Caixa de Entrada.

    echo -e "\nüì® Apenas a Caixa de Entrada (cur e new) ser√° migrada."
    # Informa isso ao usu√°rio.

    CAIXAS_MIGRAR=()
    # Inicializa `CAIXAS_MIGRAR` como um array vazio. O restante do script saber√° que s√≥ "cur" e "new" da raiz devem ser migrados.
else
    # Se o usu√°rio digitou algo, significa que h√° caixas extras a migrar.

    # Converte a entrada do usu√°rio em array
    IFS=' ' read -r -a CAIXAS_MIGRAR <<<"$CAIXAS_PERSONALIZADAS"
    # Divide a string da vari√°vel `CAIXAS_PERSONALIZADAS` em um array, com base nos espa√ßos em branco.
    # Exemplo: `.Sent .Trash` ‚Üí `CAIXAS_MIGRAR[0]=.Sent`, `CAIXAS_MIGRAR[1]=.Trash`

    # Mostra o resumo das caixas que ser√£o migradas
    echo -e "\nüì§ Al√©m da Caixa de Entrada, ser√£o migradas as seguintes caixas:"
    for caixa in "${CAIXAS_MIGRAR[@]}"; do
        echo "   - $caixa"
    done
    # Faz um loop sobre o array `CAIXAS_MIGRAR` e imprime uma a uma.
    # Isso permite ao operador revisar visualmente as pastas que indicou para migra√ß√£o.
fi

# Confirma antes de prosseguir
read -rp $'\nüîÅ Pressione [Enter] para continuar com a migra√ß√£o conforme as caixas escolhidas, ou CTRL+C para cancelar...'
# Pausa a execu√ß√£o, dando ao operador uma chance final de revisar e cancelar se tiver informado algo errado.
# ENTER ‚Üí continua | CTRL+C ‚Üí cancela

# === PARTE 6: Prepara√ß√£o da transfer√™ncia via rsync ===
# Esta parte do script coleta os dados de acesso ao servidor de destino e testa a conex√£o SSH,
# garantindo que o `rsync` poder√° ser usado para transferir os arquivos de e-mail.

echo -e "\nüöÄ Vamos configurar a conex√£o com o servidor de destino para iniciar a transfer√™ncia."
# Imprime uma mensagem visual para o operador informando que agora ser√° configurada a conex√£o com o servidor de destino (remoto).

# Solicita os dados de conex√£o do servidor destino

read -rp $'\nüåê Host ou IP do servidor de destino (ex: us129.serverdo.in): ' DEST_HOST
# Solicita ao operador que digite o **hostname ou IP do servidor destino**.
# O valor √© armazenado na vari√°vel `DEST_HOST`.

read -rp $'\nüîê Usu√°rio SSH do destino (ex: root): ' DEST_USER
# Solicita o nome do **usu√°rio SSH** que ser√° usado para conectar ao servidor (ex: root).
# O valor √© armazenado na vari√°vel `DEST_USER`.

read -rp $'\nüì° Porta SSH (ex: 22 ou 51439): ' DEST_PORT
# Pergunta a **porta SSH** usada para a conex√£o.
# Essa etapa √© importante porque servidores gerenciados muitas vezes usam portas n√£o padr√£o por seguran√ßa.

read -rsp $'\nüîë Senha do usu√°rio SSH: ' DEST_SENHA
# Solicita a senha do usu√°rio SSH, usando `-s` para que a entrada n√£o seja exibida no terminal (modo silencioso).
# O valor √© armazenado em `DEST_SENHA`.

echo ""
# Apenas imprime uma quebra de linha para manter a interface visual organizada ap√≥s a entrada da senha.

# Testa a conectividade com o servidor remoto
echo -e "\nüîé Testando conectividade SSH com o servidor destino..."
# Informa ao operador que a conex√£o ser√° testada antes de prosseguir com a migra√ß√£o.

# Tenta conex√£o e captura a sa√≠da de erro
ERRO_SSH=$(sshpass -p "$DEST_SENHA" ssh -p "$DEST_PORT" \
    -o StrictHostKeyChecking=no \
    -o ConnectTimeout=10 \
    "$DEST_USER@$DEST_HOST" \
    "echo '‚úÖ Conex√£o estabelecida com sucesso.'" 2>&1)
# Esta linha executa o teste real de conex√£o SSH:
# - Usa o `sshpass` com a senha fornecida para autentica√ß√£o autom√°tica (sem prompt).
# - Conecta-se ao servidor remoto usando a porta, usu√°rio e host informados.
# - Usa as op√ß√µes:
#   - `StrictHostKeyChecking=no`: evita travar por causa da pergunta de "yes/no" da primeira conex√£o.
#   - `ConnectTimeout=10`: limita o tempo de tentativa de conex√£o a 10 segundos.
# - Se a conex√£o for bem-sucedida, imprime uma mensagem simples no terminal remoto.
# - Toda a sa√≠da padr√£o e de erro √© redirecionada para `ERRO_SSH`, permitindo capturar mensagens de falha se houver.

# Verifica o resultado do teste de conex√£o
if [ $? -ne 0 ]; then
    # A vari√°vel `$?` cont√©m o **c√≥digo de sa√≠da** do √∫ltimo comando executado.
    # Se for diferente de zero (`-ne 0`), significa que o comando SSH falhou.

    echo -e "‚ùå N√£o foi poss√≠vel conectar-se ao servidor remoto com os dados fornecidos."
    # Exibe mensagem de erro gen√©rica.

    echo -e "üìÑ Detalhes do erro SSH:\n"
    echo "$ERRO_SSH"
    # Exibe a mensagem de erro real retornada pelo SSH, capturada anteriormente.

    echo -e "\nüîÅ Verifique se o host, porta, usu√°rio e senha est√£o corretos."
    # Sugere que o operador revise os dados fornecidos.

    exit 1
    # Sai do script com erro, pois n√£o √© poss√≠vel continuar a migra√ß√£o sem acesso SSH ao servidor remoto.
else
    echo -e "\n‚úÖ Conex√£o SSH testada com sucesso. Pronto para iniciar a migra√ß√£o."
    # Caso o SSH retorne c√≥digo de sa√≠da 0, a conex√£o foi bem-sucedida.
    # Informa ao operador que o ambiente est√° pronto para iniciar o processo de `rsync`.
fi
